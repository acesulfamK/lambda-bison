State 27 conflicts: 3 shift/reduce
State 34 conflicts: 3 shift/reduce
State 36 conflicts: 3 shift/reduce
State 37 conflicts: 3 shift/reduce
State 38 conflicts: 2 shift/reduce
State 39 conflicts: 3 shift/reduce


Grammar

    0 $accept: input $end

    1 input: ε
    2      | input line

    3 line: '\n'
    4     | expr '\n'
    5     | error '\n'

    6 expr: abst
    7     | appl

    8 abst: '(' abst ')'
    9     | '\\' abstvars '.' abst
   10     | '\\' abstvars '.' appl
   11     | '\\' abstvars '.' VAR

   12 abstvars: VAR
   13         | abstvars VAR

   14 appl: '(' appl ')'
   15     | VAR VAR
   16     | abst abst
   17     | appl abst
   18     | '(' abst ')' appl
   19     | VAR '(' appl ')'
   20     | VAR abst
   21     | appl VAR
   22     | '(' abst ')' VAR


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 3 4 5
    '(' (40) 8 14 18 19 22
    ')' (41) 8 14 18 19 22
    '.' (46) 9 10 11
    '\\' (92) 9 10 11
    error (256) 5
    VAR <char> (258) 11 12 13 15 19 20 21 22
    APPL (259)


Nonterminals, with rules where they appear

    $accept (10)
        on left: 0
    input (11)
        on left: 1 2
        on right: 0 2
    line (12)
        on left: 3 4 5
        on right: 2
    expr <node *> (13)
        on left: 6 7
        on right: 4
    abst <node *> (14)
        on left: 8 9 10 11
        on right: 6 8 9 16 17 18 20 22
    abstvars <node *> (15)
        on left: 12 13
        on right: 9 10 11 13
    appl <node *> (16)
        on left: 14 15 16 17 18 19 20 21 22
        on right: 7 10 14 17 18 19 21


State 0

    0 $accept: • input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input • $end
    2 input: input • line

    $end   shift, and go to state 2
    error  shift, and go to state 3
    VAR    shift, and go to state 4
    '\n'   shift, and go to state 5
    '('    shift, and go to state 6
    '\\'   shift, and go to state 7

    line  go to state 8
    expr  go to state 9
    abst  go to state 10
    appl  go to state 11


State 2

    0 $accept: input $end •

    $default  accept


State 3

    5 line: error • '\n'

    '\n'  shift, and go to state 12


State 4

   15 appl: VAR • VAR
   19     | VAR • '(' appl ')'
   20     | VAR • abst

    VAR   shift, and go to state 13
    '('   shift, and go to state 14
    '\\'  shift, and go to state 7

    abst  go to state 15


State 5

    3 line: '\n' •

    $default  reduce using rule 3 (line)


State 6

    8 abst: '(' • abst ')'
   14 appl: '(' • appl ')'
   18     | '(' • abst ')' appl
   22     | '(' • abst ')' VAR

    VAR   shift, and go to state 4
    '('   shift, and go to state 6
    '\\'  shift, and go to state 7

    abst  go to state 16
    appl  go to state 17


State 7

    9 abst: '\\' • abstvars '.' abst
   10     | '\\' • abstvars '.' appl
   11     | '\\' • abstvars '.' VAR

    VAR  shift, and go to state 18

    abstvars  go to state 19


State 8

    2 input: input line •

    $default  reduce using rule 2 (input)


State 9

    4 line: expr • '\n'

    '\n'  shift, and go to state 20


State 10

    6 expr: abst •
   16 appl: abst • abst

    '('   shift, and go to state 21
    '\\'  shift, and go to state 7

    $default  reduce using rule 6 (expr)

    abst  go to state 22


State 11

    7 expr: appl •
   17 appl: appl • abst
   21     | appl • VAR

    VAR   shift, and go to state 23
    '('   shift, and go to state 21
    '\\'  shift, and go to state 7

    $default  reduce using rule 7 (expr)

    abst  go to state 24


State 12

    5 line: error '\n' •

    $default  reduce using rule 5 (line)


State 13

   15 appl: VAR VAR •

    $default  reduce using rule 15 (appl)


State 14

    8 abst: '(' • abst ')'
   19 appl: VAR '(' • appl ')'

    VAR   shift, and go to state 4
    '('   shift, and go to state 6
    '\\'  shift, and go to state 7

    abst  go to state 25
    appl  go to state 26


State 15

   20 appl: VAR abst •

    $default  reduce using rule 20 (appl)


State 16

    8 abst: '(' abst • ')'
   16 appl: abst • abst
   18     | '(' abst • ')' appl
   22     | '(' abst • ')' VAR

    '('   shift, and go to state 21
    ')'   shift, and go to state 27
    '\\'  shift, and go to state 7

    abst  go to state 22


State 17

   14 appl: '(' appl • ')'
   17     | appl • abst
   21     | appl • VAR

    VAR   shift, and go to state 23
    '('   shift, and go to state 21
    ')'   shift, and go to state 28
    '\\'  shift, and go to state 7

    abst  go to state 24


State 18

   12 abstvars: VAR •

    $default  reduce using rule 12 (abstvars)


State 19

    9 abst: '\\' abstvars • '.' abst
   10     | '\\' abstvars • '.' appl
   11     | '\\' abstvars • '.' VAR
   13 abstvars: abstvars • VAR

    VAR  shift, and go to state 29
    '.'  shift, and go to state 30


State 20

    4 line: expr '\n' •

    $default  reduce using rule 4 (line)


State 21

    8 abst: '(' • abst ')'

    '('   shift, and go to state 21
    '\\'  shift, and go to state 7

    abst  go to state 31


State 22

   16 appl: abst abst •

    $default  reduce using rule 16 (appl)


State 23

   21 appl: appl VAR •

    $default  reduce using rule 21 (appl)


State 24

   17 appl: appl abst •

    $default  reduce using rule 17 (appl)


State 25

    8 abst: '(' abst • ')'
   16 appl: abst • abst

    '('   shift, and go to state 21
    ')'   shift, and go to state 32
    '\\'  shift, and go to state 7

    abst  go to state 22


State 26

   17 appl: appl • abst
   19     | VAR '(' appl • ')'
   21     | appl • VAR

    VAR   shift, and go to state 23
    '('   shift, and go to state 21
    ')'   shift, and go to state 33
    '\\'  shift, and go to state 7

    abst  go to state 24


State 27

    8 abst: '(' abst ')' •
   18 appl: '(' abst ')' • appl
   22     | '(' abst ')' • VAR

    VAR   shift, and go to state 34
    '('   shift, and go to state 6
    '\\'  shift, and go to state 7

    VAR       [reduce using rule 8 (abst)]
    '('       [reduce using rule 8 (abst)]
    '\\'      [reduce using rule 8 (abst)]
    $default  reduce using rule 8 (abst)

    abst  go to state 35
    appl  go to state 36


State 28

   14 appl: '(' appl ')' •

    $default  reduce using rule 14 (appl)


State 29

   13 abstvars: abstvars VAR •

    $default  reduce using rule 13 (abstvars)


State 30

    9 abst: '\\' abstvars '.' • abst
   10     | '\\' abstvars '.' • appl
   11     | '\\' abstvars '.' • VAR

    VAR   shift, and go to state 37
    '('   shift, and go to state 6
    '\\'  shift, and go to state 7

    abst  go to state 38
    appl  go to state 39


State 31

    8 abst: '(' abst • ')'

    ')'  shift, and go to state 32


State 32

    8 abst: '(' abst ')' •

    $default  reduce using rule 8 (abst)


State 33

   19 appl: VAR '(' appl ')' •

    $default  reduce using rule 19 (appl)


State 34

   15 appl: VAR • VAR
   19     | VAR • '(' appl ')'
   20     | VAR • abst
   22     | '(' abst ')' VAR •

    VAR   shift, and go to state 13
    '('   shift, and go to state 14
    '\\'  shift, and go to state 7

    VAR       [reduce using rule 22 (appl)]
    '('       [reduce using rule 22 (appl)]
    '\\'      [reduce using rule 22 (appl)]
    $default  reduce using rule 22 (appl)

    abst  go to state 15


State 35

   16 appl: abst • abst

    '('   shift, and go to state 21
    '\\'  shift, and go to state 7

    abst  go to state 22


State 36

   17 appl: appl • abst
   18     | '(' abst ')' appl •
   21     | appl • VAR

    VAR   shift, and go to state 23
    '('   shift, and go to state 21
    '\\'  shift, and go to state 7

    VAR       [reduce using rule 18 (appl)]
    '('       [reduce using rule 18 (appl)]
    '\\'      [reduce using rule 18 (appl)]
    $default  reduce using rule 18 (appl)

    abst  go to state 24


State 37

   11 abst: '\\' abstvars '.' VAR •
   15 appl: VAR • VAR
   19     | VAR • '(' appl ')'
   20     | VAR • abst

    VAR   shift, and go to state 13
    '('   shift, and go to state 14
    '\\'  shift, and go to state 7

    VAR       [reduce using rule 11 (abst)]
    '('       [reduce using rule 11 (abst)]
    '\\'      [reduce using rule 11 (abst)]
    $default  reduce using rule 11 (abst)

    abst  go to state 15


State 38

    9 abst: '\\' abstvars '.' abst •
   16 appl: abst • abst

    '('   shift, and go to state 21
    '\\'  shift, and go to state 7

    '('       [reduce using rule 9 (abst)]
    '\\'      [reduce using rule 9 (abst)]
    $default  reduce using rule 9 (abst)

    abst  go to state 22


State 39

   10 abst: '\\' abstvars '.' appl •
   17 appl: appl • abst
   21     | appl • VAR

    VAR   shift, and go to state 23
    '('   shift, and go to state 21
    '\\'  shift, and go to state 7

    VAR       [reduce using rule 10 (abst)]
    '('       [reduce using rule 10 (abst)]
    '\\'      [reduce using rule 10 (abst)]
    $default  reduce using rule 10 (abst)

    abst  go to state 24
