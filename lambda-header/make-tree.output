State 28 conflicts: 3 shift/reduce
State 34 conflicts: 2 shift/reduce
State 35 conflicts: 3 shift/reduce
State 36 conflicts: 3 shift/reduce
State 38 conflicts: 3 shift/reduce
State 39 conflicts: 3 shift/reduce


Grammar

    0 $accept: input $end

    1 input: expr
    2      | error

    3 expr: abst
    4     | appl
    5     | vars

    6 abst: '(' abst ')'
    7     | LAMB abstvars '.' abst
    8     | LAMB abstvars '.' appl
    9     | LAMB abstvars '.' vars

   10 abstvars: vars
   11         | abstvars vars

   12 appl: '(' appl ')'
   13     | vars vars
   14     | abst abst
   15     | appl abst
   16     | '(' abst ')' appl
   17     | vars '(' appl ')'
   18     | vars abst
   19     | appl vars
   20     | '(' abst ')' vars

   21 vars: VAR
   22     | '(' vars ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 6 12 16 17 20 22
    ')' (41) 6 12 16 17 20 22
    '.' (46) 7 8 9
    error (256) 2
    VAR <char> (258) 21
    LAMB <char> (259) 7 8 9
    APPL (260)


Nonterminals, with rules where they appear

    $accept (9)
        on left: 0
    input (10)
        on left: 1 2
        on right: 0
    expr <node *> (11)
        on left: 3 4 5
        on right: 1
    abst <node *> (12)
        on left: 6 7 8 9
        on right: 3 6 7 14 15 16 18 20
    abstvars <node *> (13)
        on left: 10 11
        on right: 7 8 9 11
    appl <node *> (14)
        on left: 12 13 14 15 16 17 18 19 20
        on right: 4 8 12 15 16 17 19
    vars <node *> (15)
        on left: 21 22
        on right: 5 9 10 11 13 17 18 19 20 22


State 0

    0 $accept: • input $end

    error  shift, and go to state 1
    VAR    shift, and go to state 2
    LAMB   shift, and go to state 3
    '('    shift, and go to state 4

    input  go to state 5
    expr   go to state 6
    abst   go to state 7
    appl   go to state 8
    vars   go to state 9


State 1

    2 input: error •

    $default  reduce using rule 2 (input)


State 2

   21 vars: VAR •

    $default  reduce using rule 21 (vars)


State 3

    7 abst: LAMB • abstvars '.' abst
    8     | LAMB • abstvars '.' appl
    9     | LAMB • abstvars '.' vars

    VAR  shift, and go to state 2
    '('  shift, and go to state 10

    abstvars  go to state 11
    vars      go to state 12


State 4

    6 abst: '(' • abst ')'
   12 appl: '(' • appl ')'
   16     | '(' • abst ')' appl
   20     | '(' • abst ')' vars
   22 vars: '(' • vars ')'

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 4

    abst  go to state 13
    appl  go to state 14
    vars  go to state 15


State 5

    0 $accept: input • $end

    $end  shift, and go to state 16


State 6

    1 input: expr •

    $default  reduce using rule 1 (input)


State 7

    3 expr: abst •
   14 appl: abst • abst

    LAMB  shift, and go to state 3
    '('   shift, and go to state 17

    $default  reduce using rule 3 (expr)

    abst  go to state 18


State 8

    4 expr: appl •
   15 appl: appl • abst
   19     | appl • vars

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 19

    $default  reduce using rule 4 (expr)

    abst  go to state 20
    vars  go to state 21


State 9

    5 expr: vars •
   13 appl: vars • vars
   17     | vars • '(' appl ')'
   18     | vars • abst

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 22

    $default  reduce using rule 5 (expr)

    abst  go to state 23
    vars  go to state 24


State 10

   22 vars: '(' • vars ')'

    VAR  shift, and go to state 2
    '('  shift, and go to state 10

    vars  go to state 25


State 11

    7 abst: LAMB abstvars • '.' abst
    8     | LAMB abstvars • '.' appl
    9     | LAMB abstvars • '.' vars
   11 abstvars: abstvars • vars

    VAR  shift, and go to state 2
    '.'  shift, and go to state 26
    '('  shift, and go to state 10

    vars  go to state 27


State 12

   10 abstvars: vars •

    $default  reduce using rule 10 (abstvars)


State 13

    6 abst: '(' abst • ')'
   14 appl: abst • abst
   16     | '(' abst • ')' appl
   20     | '(' abst • ')' vars

    LAMB  shift, and go to state 3
    '('   shift, and go to state 17
    ')'   shift, and go to state 28

    abst  go to state 18


State 14

   12 appl: '(' appl • ')'
   15     | appl • abst
   19     | appl • vars

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 19
    ')'   shift, and go to state 29

    abst  go to state 20
    vars  go to state 21


State 15

   13 appl: vars • vars
   17     | vars • '(' appl ')'
   18     | vars • abst
   22 vars: '(' vars • ')'

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 22
    ')'   shift, and go to state 30

    abst  go to state 23
    vars  go to state 24


State 16

    0 $accept: input $end •

    $default  accept


State 17

    6 abst: '(' • abst ')'

    LAMB  shift, and go to state 3
    '('   shift, and go to state 17

    abst  go to state 31


State 18

   14 appl: abst abst •

    $default  reduce using rule 14 (appl)


State 19

    6 abst: '(' • abst ')'
   22 vars: '(' • vars ')'

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 19

    abst  go to state 31
    vars  go to state 25


State 20

   15 appl: appl abst •

    $default  reduce using rule 15 (appl)


State 21

   19 appl: appl vars •

    $default  reduce using rule 19 (appl)


State 22

    6 abst: '(' • abst ')'
   17 appl: vars '(' • appl ')'
   22 vars: '(' • vars ')'

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 4

    abst  go to state 32
    appl  go to state 33
    vars  go to state 15


State 23

   18 appl: vars abst •

    $default  reduce using rule 18 (appl)


State 24

   13 appl: vars vars •

    $default  reduce using rule 13 (appl)


State 25

   22 vars: '(' vars • ')'

    ')'  shift, and go to state 30


State 26

    7 abst: LAMB abstvars '.' • abst
    8     | LAMB abstvars '.' • appl
    9     | LAMB abstvars '.' • vars

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 4

    abst  go to state 34
    appl  go to state 35
    vars  go to state 36


State 27

   11 abstvars: abstvars vars •

    $default  reduce using rule 11 (abstvars)


State 28

    6 abst: '(' abst ')' •
   16 appl: '(' abst ')' • appl
   20     | '(' abst ')' • vars

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 4

    VAR       [reduce using rule 6 (abst)]
    LAMB      [reduce using rule 6 (abst)]
    '('       [reduce using rule 6 (abst)]
    $default  reduce using rule 6 (abst)

    abst  go to state 37
    appl  go to state 38
    vars  go to state 39


State 29

   12 appl: '(' appl ')' •

    $default  reduce using rule 12 (appl)


State 30

   22 vars: '(' vars ')' •

    $default  reduce using rule 22 (vars)


State 31

    6 abst: '(' abst • ')'

    ')'  shift, and go to state 40


State 32

    6 abst: '(' abst • ')'
   14 appl: abst • abst

    LAMB  shift, and go to state 3
    '('   shift, and go to state 17
    ')'   shift, and go to state 40

    abst  go to state 18


State 33

   15 appl: appl • abst
   17     | vars '(' appl • ')'
   19     | appl • vars

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 19
    ')'   shift, and go to state 41

    abst  go to state 20
    vars  go to state 21


State 34

    7 abst: LAMB abstvars '.' abst •
   14 appl: abst • abst

    LAMB  shift, and go to state 3
    '('   shift, and go to state 17

    LAMB      [reduce using rule 7 (abst)]
    '('       [reduce using rule 7 (abst)]
    $default  reduce using rule 7 (abst)

    abst  go to state 18


State 35

    8 abst: LAMB abstvars '.' appl •
   15 appl: appl • abst
   19     | appl • vars

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 19

    VAR       [reduce using rule 8 (abst)]
    LAMB      [reduce using rule 8 (abst)]
    '('       [reduce using rule 8 (abst)]
    $default  reduce using rule 8 (abst)

    abst  go to state 20
    vars  go to state 21


State 36

    9 abst: LAMB abstvars '.' vars •
   13 appl: vars • vars
   17     | vars • '(' appl ')'
   18     | vars • abst

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 22

    VAR       [reduce using rule 9 (abst)]
    LAMB      [reduce using rule 9 (abst)]
    '('       [reduce using rule 9 (abst)]
    $default  reduce using rule 9 (abst)

    abst  go to state 23
    vars  go to state 24


State 37

   14 appl: abst • abst

    LAMB  shift, and go to state 3
    '('   shift, and go to state 17

    abst  go to state 18


State 38

   15 appl: appl • abst
   16     | '(' abst ')' appl •
   19     | appl • vars

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 19

    VAR       [reduce using rule 16 (appl)]
    LAMB      [reduce using rule 16 (appl)]
    '('       [reduce using rule 16 (appl)]
    $default  reduce using rule 16 (appl)

    abst  go to state 20
    vars  go to state 21


State 39

   13 appl: vars • vars
   17     | vars • '(' appl ')'
   18     | vars • abst
   20     | '(' abst ')' vars •

    VAR   shift, and go to state 2
    LAMB  shift, and go to state 3
    '('   shift, and go to state 22

    VAR       [reduce using rule 20 (appl)]
    LAMB      [reduce using rule 20 (appl)]
    '('       [reduce using rule 20 (appl)]
    $default  reduce using rule 20 (appl)

    abst  go to state 23
    vars  go to state 24


State 40

    6 abst: '(' abst ')' •

    $default  reduce using rule 6 (abst)


State 41

   17 appl: vars '(' appl ')' •

    $default  reduce using rule 17 (appl)
